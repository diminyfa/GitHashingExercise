All codes are executed by compiling the programm (gcc example#.c -o example#), then running it (./example#)


1)The output of example1.c should be looking like

Parent Process: PID = 3120420, Created Child PID = 3120421
Child Process: PID = 3120421, Parent PID = 3120420
total 104
***(output of ls -l)***
Parent Process: Child has terminated.

A brief explanation of the C code:
The program creates a new process using fork(). Then the child process executes the ls -l command using the execlp() 
as parent process waits using wait().If any of the commands fails an error message is printed




2)The output of example2.c should be looking like

Current Process ID (PID): 3120553
Parent Process ID (PPID): 3116868

A brief explanation of the C code:
This program gets the current process ID (PID) and the parent process ID (PPID) and prints them.





3)The output of example3.c should be looking like

Process ID: 3120574
Press Ctrl+C to trigger SIGINT.
Running... Press Ctrl+C to exit.
Running... Press Ctrl+C to exit.
Running... Press Ctrl+C to exit.
^C
Caught signal 2 (SIGINT). Exiting gracefully...


A brief explanation of the C code:
This program registers a signal handler for SIGINT using signal() and runs on an infinite loop. The program catches 
the signal SIGINT when Ctrl+C is pressed and then prints a message with the process ID and terminates gracefully.




4)The output of example4.c should be looking like

Process ID: 3120620
Press Ctrl+C to attempt to send SIGINT.
Running... Try pressing Ctrl+C.
Running... Try pressing Ctrl+C.
Running... Try pressing Ctrl+C.
^C
Received SIGINT (signal 2), but ignoring it.
Running... Try pressing Ctrl+C.
Running... Try pressing Ctrl+C.
Running... Try pressing Ctrl+C.
^C
Received SIGINT (signal 2), but ignoring it.
Running... Try pressing Ctrl+C.
Running... Try pressing Ctrl+C.
Running... Try pressing Ctrl+C.
^C
Received SIGINT (signal 2), but ignoring it.
Running... Try pressing Ctrl+C.
^Z
[1]+  Stopped                 ./example4


A brief explanation of the C code:
This program is similar to example3.c except its signal handler is missing the exit(0) command. 
Therefore pressing Ctrl+C does not terminate the program and infinitely prints the same message.



5)The output of example5.c should be looking like

Parent process ID: 3120644. Child PID: 3120645
Child process ID: 3120645. Waiting for SIGUSR1...
Parent sending SIGUSR1 to child.
Child received SIGUSR1 (signal 10).
Parent sending SIGTERM to child.
Child process terminated.


A brief explanation of the C code:
The program demonstrates inter-process communication using signals. The parent process sends SIGUSR1 to the child, 
which is handled by the childâ€™s signal handler. Afterward, the parent sends SIGTERM to terminate the child gracefully.


